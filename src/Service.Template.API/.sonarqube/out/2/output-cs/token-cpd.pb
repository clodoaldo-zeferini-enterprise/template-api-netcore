ï¿½
sD:\GitHub\clodoaldozeferini\TestesGit\ASPNet\.NetCore\src\Exemplo\ServerSide\Exemplo.Infrastructure\IoC\Registry.cs
	namespace 	
Exemplo
 
. 
Infrastructure  
.  !
IoC! $
{

 
public 

static 
class 
Registry  
{ 
public 
static 
void 
RegisterApplication .
(. /
this/ 3
IServiceCollection4 F
servicesG O
)O P
{ 	
services 
. 
AddTransient !
<! "

IUseCaseAsync" /
</ 0
UserRequest0 ;
,; <
UserOutResponse= L
>L M
,M N&
AutenticarUserUseCaseAsyncO i
>i j
(j k
)k l
;l m
services 
. 
AddTransient !
Template! "

ITemplateeAsync" /
</ 0
PessoaBuscaRequest0 B
,Template C
PessoaOutResponseD U
>U V
,V W!
GetPessoaUseCaseAsyncX m
>m n
(n o
)o p
;p q
services 
. 
Templatensient !
<! "
Template
IUseCaseAsync" /
</ 0
Template
PessoaRequest0 =
,= >
PessoaOutResponse? P
>P Q
,Q R
PessoaUseCaseAsyncS e
>e f
(f g
)g h
;h i
} 	
public 
static 
void 
RegisterDatabase +
(+ ,
this, 0
IServiceCollection1 C
servicesD L
)TemplateL M
{ 	
Templatees 
. 
AddTransient !
<! "
IPessoaRepository" 3
,3 4
PessoaRepository5 E
>E F
(F G
)G H
;H I
}"" 	
}## 
}$$ ï¿½

ï¿½D:\GitHub\clodoaldozeferini\TestesGit\ASPNet\.NetCore\src\Exemplo\ServerSide\Exemplo.Infrastructure\Mappers\AutoMapperBootstrapper.cs
	namespace

 	
Exemplo


 
.

 
Infrastructure

  
.

  !
Mappers

! (
{ 
public 

static 
class "
AutoMapperBootstrapper .
{

 
public 
static 
void 
RegisterAutoMapper -
<- .
TProfile. 6
>6 7
(7 8
this8 <
IServiceCollection= O
serviceCollectionP a
)b c
whered i
TProfilej r
:s t
Profileu |
,| }
new	~ ï¿½
(
ï¿½ ï¿½
)
ï¿½ ï¿½
{ 	
var 

autoMapper 
= 
new  
MapperConfiguration! 4
(4 5
c5 6
=>7 9
c: ;
.; <

AddProfile< F
<F G
TProfileG O
>O P
(P Q
)Q R
)R S
;S T
serviceCollection 
. 
AddSingleton *
(* +

autoMapper+ 5
.5 6
CreateMapper6 B
(B C
)C D
)D E
;E F
} 	
} 
} ï¿½=
ï¿½D:\GitHub\clodoaldozeferini\TestesGit\ASPNet\.NetCore\src\Exemplo\ServerSide\Exemplo.Infrastructure\Repositories\Base\DapperUtils.cs
	namespace 	
Exemplo
 
. 
Infrastructure  
.  !
Repositories! -
.- .
Base. 2
{ 
public		 

class		 
DapperUtils		 
{

 
[ 	
AttributeUsage	 
( 
AttributeTargets (
.( )
Property) 1
)1 2
]2 3
public 
class 
	DapperKey 
:  
	Attribute! *
{+ ,
}- .
[ 	
AttributeUsage	 
( 
AttributeTargets (
.( )
Property) 1
)1 2
]2 3
public 
class 
DapperIgnore !
:" #
	Attribute$ -
{. /
}0 1
public 
PropertyContainer  !
ParsePropertiesInsert! 6
<6 7
T7 8
>8 9
(9 :
T: ;
obj< ?
)? @
{ 	
var 
propertyContainer !
=" #
new$ '
PropertyContainer( 9
(9 :
): ;
;; <
var 
typeName 
= 
typeof !
(! "
T" #
)# $
.$ %
Name% )
;) *
var 

validKeyNames 
= 
new  #
[# $
]$ %
{& '
$str( ,
,, -
string. 4
.4 5
Format5 ;
(; <
$str< C
,C D
typeNameE M
)M N
}O P
;P Q
Type 
t 
= 
obj 
. 
GetType  
(  !
)! "
;" #
var 

properties 
= 
t 
. 

GetProperties ,
(, -
)- .
;. /
foreach   
(   
var   
property   !
in  " $

properties  % /
)  / 0
{!! 

if## 
(## 
property## 
.## 
PropertyType## )
.##) *
IsClass##* 1
&&##2 4
property##5 =
.##= >
PropertyType##> J
!=##K M
typeof##N T
(##T U
string##U [
)##[ \
)##\ ]
continue$$ 
;$$ 
if'' 
('' 
property'' 
.'' 
	IsDefined'' &
(''& '
typeof''' -
(''- .
DapperIgnore''. :
)'': ;
,''; <
false''= B
)''B C
)''C D
continue(( 
;(( 
var** 
name** 
=** 
property** #
.**# $
Name**$ (
;**( )
var++ 
value++ 
=++ 
property++ $
.++$ %
GetValue++% -
(++- .
obj++. 1
)++1 2
;++2 3
if.. 
(.. 
property.. 
... 
	IsDefined.. &
(..& '
typeof..' -
(..- .
	DapperKey... 7
)..7 8
,..8 9
false..: ?
)..? @
||..A C

validKeyNames..D Q
...Q R
Contains..R Z
(..Z [
name..[ _
..._ `
ToUpper..` g
(..g h
)..h i
)..i j
)..j k
{// 
propertyContainer00 %
.00% &
AddId00& +
(00+ ,
name00, 0
,000 1
value002 7
)007 8
;008 9
}11 
else22 
{33 
propertyContainer44 %
.44% &
AddValue44& .
(44. /
name44/ 3
,443 4
value445 :
)44: ;
;44; <
}55 
}66 

return88 
propertyContainer88 $
;88$ %
}99 	
public;; 
class;; 
PropertyContainer;; &
{<< 	
private== 
readonly== 

Dictionary== '
<==' (
string==( .
,==. /
object==0 6
>==6 7
_ids==8 <
;==< =
private>> 
readonly>> 

Dictionary>> '
<>>' (
string>>( .
,>>. /
object>>0 6
>>>6 7
_values>>8 ?
;>>? @
internalBB 
IEnumerableBB  
<BB  !
stringBB! '
>BB' (
IdNamesBB) 0
{CC 

getDD 
{DD 
returnDD 
_idsDD !
.DD! "
KeysDD" &
;DD& '
}DD( )
}EE 

internalGG 
IEnumerableGG  
<GG  !
stringGG! '
>GG' (

ValueNamesGG) 3
{HH 

getII 
{II 
returnII 
_valuesII $
.II$ %
KeysII% )
;II) *
}II+ ,
}JJ 

internalLL 
IEnumerableLL  
<LL  !
stringLL! '
>LL' (
AllNamesLL) 1
{MM 

getNN 
{NN 
returnNN 
_idsNN !
.NN! "
KeysNN" &
.NN& '
UnionNN' ,
(NN, -
_valuesNN- 4
.NN4 5
KeysNN5 9
)NN9 :
;NN: ;
}NN< =
}OO 

internalQQ 
IDictionaryQQ  
<QQ  !
stringQQ! '
,QQ' (
objectQQ) /
>QQ/ 0
IdPairsQQ1 8
{RR 

getSS 
{SS 
returnSS 
_idsSS !
;SS! "
}SS# $
}TT 

internalVV 
IDictionaryVV  
<VV  !
stringVV! '
,VV' (
objectVV) /
>VV/ 0

ValuePairsVV1 ;
{WW 

getXX 
{XX 
returnXX 
_valuesXX $
;XX$ %
}XX& '
}YY 

internal[[ 
IEnumerable[[  
<[[  !
KeyValuePair[[! -
<[[- .
string[[. 4
,[[4 5
object[[6 <
>[[< =
>[[= >
AllPairs[[? G
{\\ 

get]] 
{]] 
return]] 
_ids]] !
.]]! "
Concat]]" (
(]]( )
_values]]) 0
)]]0 1
;]]1 2
}]]3 4
}^^ 

internalcc 
PropertyContainercc &
(cc& '
)cc' (
{dd 

_idsee 
=ee 
newee 

Dictionaryee %
<ee% &
stringee& ,
,ee, -
objectee. 4
>ee4 5
(ee5 6
)ee6 7
;ee7 8
_valuesff 
=ff 
newff 

Dictionaryff (
<ff( )
stringff) /
,ff/ 0
objectff1 7
>ff7 8
(ff8 9
)ff9 :
;ff: ;
}gg 

internalkk 
voidkk 
AddIdkk 
(kk  
stringkk  &
namekk' +
,kk+ ,
objectkk- 3
valuekk4 9
)kk9 :
{ll 

_idsmm 
.mm 
Addmm 
(mm 
namemm 
,mm 
valuemm $
)mm$ %
;mm% &
}nn 

internaloo 
voidoo 
AddValueoo "
(oo" #
stringoo# )
nameoo* .
,oo. /
objectoo0 6
valueoo7 <
)oo< =
{pp 

_valuesqq 
.qq 
Addqq 
(qq 
nameqq  
,qq  !
valueqq" '
)qq' (
;qq( )
}rr 

}tt 	
}uu 
}vv ï¿½ï¿½
ï¿½D:\GitHub\clodoaldozeferini\TestesGit\ASPNet\.NetCore\src\Exemplo\ServerSide\Exemplo.Infrastructure\Repositories\Base\Repository.cs
	namespace

 	
Exemplo


 
.

 
Infrastructure

  
.

  !
Repositories

! -
.

- .
Base

. 2
{ 
public 

abstract 
class 

Repository $
<$ %
TEntity% ,
>, -
:. /
IRepositoryBase0 ?
<? @
TEntity@ G
>G H
whereI N
TEntityO V
:W X
classY ^
{ 
private 
readonly 
string 
_connectionString  1
;1 2
	protected 

Repository 
( 
EDataBaseConnection 0
eDataBaseConnection1 D
,D E
IConfigurationF T

configurationU b
)b c
{ 	
_connectionString 
= 

configuration  -
.- .
GetConnectionString. A
(A B
ConvertB I
.I J
ToStringJ R
(R S
(S T
intT W
)W X
eDataBaseConnectionX k
)k l
)l m
;m n
} 	
public 
Tuple 
< 
IEnumerable  
<  !
T1! #
># $
,$ %
IEnumerable& 1
<1 2
T22 4
>4 5
>5 6
GetMultiple7 B
<B C
T1C E
,E F
T2G I
>I J
(J K
stringK Q
sqlR U
,U V
objectW ]

parameters^ h
,h i
Func( ,
<, -

GridReader- 7
,7 8
IEnumerable9 D
<D E
T1E G
>G H
>H I
func1J O
,O P
Func( ,
<, -

GridReader- 7
,7 8
IEnumerable9 D
<D E
T2E G
>G H
>H I
func2J O
)O P
{ 	
var 
objs 
= 

ObterMultiple $
($ %
sql% (
,( )

parameters* 4
,4 5
func16 ;
,; <
func2= B
)B C
;C D
return 
Tuple 
. 
Create 
(  
objs  $
[$ %
$num% &
]& '
as( *
IEnumerable+ 6
<6 7
T17 9
>9 :
,: ;
objs< @
[@ A
$numA B
]B C
asD F
IEnumerableG R
<R S
T2S U
>U V
)V W
;W X
} 	
public   
Tuple   
<   
IEnumerable    
<    !
T1  ! #
>  # $
,  $ %
IEnumerable  & 1
<  1 2
T2  2 4
>  4 5
,  5 6
IEnumerable  7 B
<  B C
T3  C E
>  E F
>  F G
GetMultiple  H S
<  S T
T1  T V
,  V W
T2  X Z
,  Z [
T3  \ ^
>  ^ _
(  _ `
string  ` f
sql  g j
,  j k
object  l r

parameters  s }
,  } ~
Func!!( ,
<!!, -

GridReader!!- 7
,!!7 8
IEnumerable!!9 D
<!!D E
T1!!E G
>!!G H
>!!H I
func1!!J O
,!!O P
Func""( ,
<"", -

GridReader""- 7
,""7 8
IEnumerable""9 D
<""D E
T2""E G
>""G H
>""H I
func2""J O
,""O P
Func##( ,
<##, -

GridReader##- 7
,##7 8
IEnumerable##9 D
<##D E
T3##E G
>##G H
>##H I
func3##J O
)##O P
{$$ 	
var%% 
objs%% 
=%% 

ObterMultiple%% $
(%%$ %
sql%%% (
,%%( )

parameters%%* 4
,%%4 5
func1%%6 ;
,%%; <
func2%%= B
,%%B C
func3%%D I
)%%I J
;%%J K
return&& 
Tuple&& 
.&& 
Create&& 
(&&  
objs'' 
['' 
$num'' 
]'' 
as'' 
IEnumerable'' (
<''( )
T1'') +
>''+ ,
,(( 
objs(( 
[(( 
$num(( 
](( 
as(( 
IEnumerable(( (
<((( )
T2(() +
>((+ ,
,)) 
objs)) 
[)) 
$num)) 
])) 
as)) 
IEnumerable)) (
<))( )
T3))) +
>))+ ,
))), -
;))- .
}** 	
public,, 
Tuple,, 
<,, 
IEnumerable,,  
<,,  !
T1,,! #
>,,# $
,,,$ %
IEnumerable,,& 1
<,,1 2
T2,,2 4
>,,4 5
,,,5 6
IEnumerable,,7 B
<,,B C
T3,,C E
>,,E F
,,,F G
IEnumerable,,H S
<,,S T
T4,,T V
>,,V W
>,,W X
GetMultiple,,Y d
<,,d e
T1,,e g
,,,g h
T2,,i k
,,,k l
T3,,m o
,,,o p
T4,,q s
>,,s t
(,,t u
string,,u {
sql,,| 
,	,, ï¿½
object
,,ï¿½ ï¿½

parameters
,,ï¿½ ï¿½
,
,,ï¿½ ï¿½
Func
,,ï¿½ ï¿½
<
,,ï¿½ ï¿½

GridReader
,,ï¿½ ï¿½
,
,,ï¿½ ï¿½
IEnumerable
,,ï¿½ ï¿½
<
,,ï¿½ ï¿½
T1
,,ï¿½ ï¿½
>
,,ï¿½ ï¿½
>
,,ï¿½ ï¿½
func1
,,ï¿½ ï¿½
,
,,ï¿½ ï¿½
Func
,,ï¿½ ï¿½
<
,,ï¿½ ï¿½

GridReader
,,ï¿½ ï¿½
,
,,ï¿½ ï¿½
IEnumerable
,,ï¿½ ï¿½
<
,,ï¿½ ï¿½
T2
,,ï¿½ ï¿½
>
,,ï¿½ ï¿½
>
,,ï¿½ ï¿½
func2
,,ï¿½ ï¿½
,
,,ï¿½ ï¿½
Func
,,ï¿½ ï¿½
<
,,ï¿½ ï¿½

GridReader
,,ï¿½ ï¿½
,
,,ï¿½ ï¿½
IEnumerable
,,ï¿½ ï¿½
<
,,ï¿½ ï¿½
T3
,,ï¿½ ï¿½
>
,,ï¿½ ï¿½
>
,,ï¿½ ï¿½
func3
,,ï¿½ ï¿½
,
,,ï¿½ ï¿½
Func
,,ï¿½ ï¿½
<
,,ï¿½ ï¿½

GridReader
,,ï¿½ ï¿½
,
,,ï¿½ ï¿½
IEnumerable
,,ï¿½ ï¿½
<
,,ï¿½ ï¿½
T4
,,ï¿½ ï¿½
>
,,ï¿½ ï¿½
>
,,ï¿½ ï¿½
func4
,,ï¿½ ï¿½
)
,,ï¿½ ï¿½
{-- 	
var.. 
objs.. 
=.. 

ObterMultiple.. $
(..$ %
sql..% (
,..( )

parameters..* 4
,..4 5
func1..6 ;
,..; <
func2..= B
,..B C
func3..D I
,..I J
func4..K P
)..P Q
;..Q R
return// 
Tuple// 
.// 
Create// 
(//  
objs00 
[00 
$num00 
]00 
as00 
IEnumerable00 (
<00( )
T100) +
>00+ ,
,11 
objs11 
[11 
$num11 
]11 
as11 
IEnumerable11 (
<11( )
T211) +
>11+ ,
,22 
objs22 
[22 
$num22 
]22 
as22 
IEnumerable22 (
<22( )
T322) +
>22+ ,
,33 
objs33 
[33 
$num33 
]33 
as33 
IEnumerable33 (
<33( )
T433) +
>33+ ,
)44 
;44 
}55 	
public77 

Tuple77 
<77 
IEnumerable77 
<77 
T177 
>77  
,77  !
IEnumerable77" -
<77- .
T277. 0
>770 1
,771 2
IEnumerable773 >
<77> ?
T377? A
>77A B
,77B C
IEnumerable77D O
<77O P
T477P R
>77R S
,77S T
IEnumerable77U `
<77` a
T577a c
>77c d
>77d e
GetMultiple88 
<88 
T188 
,88 
T288 
,88 
T388 
,88 
T488 
,88 
T588  "
>88" #
(88# $
string88$ *
sql88+ .
,88. /
object880 6

parameters887 A
,88A B
Func99  $
<99$ %

GridReader99% /
,99/ 0
IEnumerable991 <
<99< =
T199= ?
>99? @
>99@ A
func199B G
,99G H
Func::  $
<::$ %

GridReader::% /
,::/ 0
IEnumerable::1 <
<::< =
T2::= ?
>::? @
>::@ A
func2::B G
,::G H
Func;;  $
<;;$ %

GridReader;;% /
,;;/ 0
IEnumerable;;1 <
<;;< =
T3;;= ?
>;;? @
>;;@ A
func3;;B G
,;;G H
Func<<  $
<<<$ %

GridReader<<% /
,<</ 0
IEnumerable<<1 <
<<<< =
T4<<= ?
><<? @
><<@ A
func4<<B G
,<<G H
Func==  $
<==$ %

GridReader==% /
,==/ 0
IEnumerable==1 <
<==< =
T5=== ?
>==? @
>==@ A
func5==B G
)>> 
{?? 	
var@@ 
objs@@ 
=@@ 

ObterMultiple@@ $
(@@$ %
sql@@% (
,@@( )

parameters@@* 4
,@@4 5
func1@@6 ;
,@@; <
func2@@= B
,@@B C
func3@@D I
,@@I J
func4@@K P
,@@P Q
func5@@R W
)@@W X
;@@X Y
returnAA 
TupleAA 
.AA 
CreateAA 
(AA  
objsBB 
[BB 
$numBB 
]BB 
asBB 
IEnumerableBB (
<BB( )
T1BB) +
>BB+ ,
,CC 
objsCC 
[CC 
$numCC 
]CC 
asCC 
IEnumerableCC (
<CC( )
T2CC) +
>CC+ ,
,DD 
objsDD 
[DD 
$numDD 
]DD 
asDD 
IEnumerableDD (
<DD( )
T3DD) +
>DD+ ,
,EE 
objsEE 
[EE 
$numEE 
]EE 
asEE 
IEnumerableEE (
<EE( )
T4EE) +
>EE+ ,
,FF 
objsFF 
[FF 
$numFF 
]FF 
asFF 
IEnumerableFF (
<FF( )
T5FF) +
>FF+ ,
)GG 
;GG 
}HH 	
publicJJ 
TupleJJ 
<JJ 
IEnumerableJJ  
<JJ  !
T1JJ! #
>JJ# $
,JJ$ %
IEnumerableJJ& 1
<JJ1 2
T2JJ2 4
>JJ4 5
,JJ5 6
IEnumerableJJ7 B
<JJB C
T3JJC E
>JJE F
,JJF G
IEnumerableJJH S
<JJS T
T4JJT V
>JJV W
,JJW X
IEnumerableJJY d
<JJd e
T5JJe g
>JJg h
,JJh i
IEnumerableJJj u
<JJu v
T6JJv x
>JJx y
>JJy z
GetMultipleKK 
<KK 
T1KK 
,KK 
T2KK 
,KK 
T3KK  "
,KK" #
T4KK$ &
,KK& '
T5KK( *
,KK* +
T6KK, .
>KK. /
(KK/ 0
stringKK0 6
sqlKK7 :
,KK: ;
objectKK< B

parametersKKC M
,KKM N
FuncLL( ,
<LL, -

GridReaderLL- 7
,LL7 8
IEnumerableLL9 D
<LLD E
T1LLE G
>LLG H
>LLH I
func1LLJ O
,LLO P
FuncMM( ,
<MM, -

GridReaderMM- 7
,MM7 8
IEnumerableMM9 D
<MMD E
T2MME G
>MMG H
>MMH I
func2MMJ O
,MMO P
FuncNN( ,
<NN, -

GridReaderNN- 7
,NN7 8
IEnumerableNN9 D
<NND E
T3NNE G
>NNG H
>NNH I
func3NNJ O
,NNO P
FuncOO( ,
<OO, -

GridReaderOO- 7
,OO7 8
IEnumerableOO9 D
<OOD E
T4OOE G
>OOG H
>OOH I
func4OOJ O
,OOO P
FuncPP( ,
<PP, -

GridReaderPP- 7
,PP7 8
IEnumerablePP9 D
<PPD E
T5PPE G
>PPG H
>PPH I
func5PPJ O
,PPO P
FuncQQ( ,
<QQ, -

GridReaderQQ- 7
,QQ7 8
IEnumerableQQ9 D
<QQD E
T6QQE G
>QQG H
>QQH I
func6QQJ O
)RR 

{SS 	
varTT 
objsTT 
=TT 

ObterMultipleTT $
(TT$ %
sqlTT% (
,TT( )

parametersTT* 4
,TT4 5
func1TT6 ;
,TT; <
func2TT= B
,TTB C
func3TTD I
,TTI J
func4TTK P
,TTP Q
func5TTR W
,TTW X
func6TTY ^
)TT^ _
;TT_ `
returnUU 
TupleUU 
.UU 
CreateUU 
(UU  
objsVV 
[VV 
$numVV 
]VV 
asVV 
IEnumerableVV (
<VV( )
T1VV) +
>VV+ ,
,WW 
objsWW 
[WW 
$numWW 
]WW 
asWW 
IEnumerableWW (
<WW( )
T2WW) +
>WW+ ,
,XX 
objsXX 
[XX 
$numXX 
]XX 
asXX 
IEnumerableXX (
<XX( )
T3XX) +
>XX+ ,
,YY 
objsYY 
[YY 
$numYY 
]YY 
asYY 
IEnumerableYY (
<YY( )
T4YY) +
>YY+ ,
,ZZ 
objsZZ 
[ZZ 
$numZZ 
]ZZ 
asZZ 
IEnumerableZZ (
<ZZ( )
T5ZZ) +
>ZZ+ ,
,[[ 
objs[[ 
[[[ 
$num[[ 
][[ 
as[[ 
IEnumerable[[ (
<[[( )
T6[[) +
>[[+ ,
)\\ 
;\\ 
}]] 	
public__ 
Tuple__ 
<__ 
IEnumerable__  
<__  !
T1__! #
>__# $
,__$ %
IEnumerable__& 1
<__1 2
T2__2 4
>__4 5
,__5 6
IEnumerable__7 B
<__B C
T3__C E
>__E F
,__F G
IEnumerable__H S
<__S T
T4__T V
>__V W
,__W X
IEnumerable__Y d
<__d e
T5__e g
>__g h
,__h i
IEnumerable__j u
<__u v
T6__v x
>__x y
,__y z
IEnumerable	__{ ï¿½
<
__ï¿½ ï¿½
T7
__ï¿½ ï¿½
>
__ï¿½ ï¿½
>
__ï¿½ ï¿½
GetMultiple`` 
<`` 
T1`` 
,`` 
T2`` 
,`` 
T3``  "
,``" #
T4``$ &
,``& '
T5``( *
,``* +
T6``, .
,``. /
T7``0 2
>``2 3
(``3 4
string``4 :
sql``; >
,``> ?
object``@ F

parameters``G Q
,``Q R
Funcaa( ,
<aa, -

GridReaderaa- 7
,aa7 8
IEnumerableaa9 D
<aaD E
T1aaE G
>aaG H
>aaH I
func1aaJ O
,aaO P
Funcbb( ,
<bb, -

GridReaderbb- 7
,bb7 8
IEnumerablebb9 D
<bbD E
T2bbE G
>bbG H
>bbH I
func2bbJ O
,bbO P
Funccc( ,
<cc, -

GridReadercc- 7
,cc7 8
IEnumerablecc9 D
<ccD E
T3ccE G
>ccG H
>ccH I
func3ccJ O
,ccO P
Funcdd( ,
<dd, -

GridReaderdd- 7
,dd7 8
IEnumerabledd9 D
<ddD E
T4ddE G
>ddG H
>ddH I
func4ddJ O
,ddO P
Funcee( ,
<ee, -

GridReaderee- 7
,ee7 8
IEnumerableee9 D
<eeD E
T5eeE G
>eeG H
>eeH I
func5eeJ O
,eeO P
Funcff( ,
<ff, -

GridReaderff- 7
,ff7 8
IEnumerableff9 D
<ffD E
T6ffE G
>ffG H
>ffH I
func6ffJ O
,ffO P
Funcgg( ,
<gg, -

GridReadergg- 7
,gg7 8
IEnumerablegg9 D
<ggD E
T7ggE G
>ggG H
>ggH I
func7ggJ O
)hh 

{ii 	
varjj 
objsjj 
=jj 

ObterMultiplejj $
(jj$ %
sqljj% (
,jj( )

parametersjj* 4
,jj4 5
func1jj6 ;
,jj; <
func2jj= B
,jjB C
func3jjD I
,jjI J
func4jjK P
,jjP Q
func5jjR W
,jjW X
func6jjY ^
,jj^ _
func7jj` e
)jje f
;jjf g
returnkk 
Tuplekk 
.kk 
Createkk 
(kk  
objsll 
[ll 
$numll 
]ll 
asll 
IEnumerablell (
<ll( )
T1ll) +
>ll+ ,
,mm 
objsmm 
[mm 
$nummm 
]mm 
asmm 
IEnumerablemm (
<mm( )
T2mm) +
>mm+ ,
,nn 
objsnn 
[nn 
$numnn 
]nn 
asnn 
IEnumerablenn (
<nn( )
T3nn) +
>nn+ ,
,oo 
objsoo 
[oo 
$numoo 
]oo 
asoo 
IEnumerableoo (
<oo( )
T4oo) +
>oo+ ,
,pp 
objspp 
[pp 
$numpp 
]pp 
aspp 
IEnumerablepp (
<pp( )
T5pp) +
>pp+ ,
,qq 
objsqq 
[qq 
$numqq 
]qq 
asqq 
IEnumerableqq (
<qq( )
T6qq) +
>qq+ ,
,rr 
objsrr 
[rr 
$numrr 
]rr 
asrr 
IEnumerablerr (
<rr( )
T7rr) +
>rr+ ,
)ss 
;ss 
}tt 	
privatevv 
Listvv 
<vv 
objectvv 
>vv 

ObterMultiplevv *
(vv* +
stringvv+ 1
sqlvv2 5
,vv5 6
objectvv7 =

parametersvv> H
,vvH I
paramsvvJ P
FuncvvQ U
<vvU V

GridReadervvV `
,vv` a
objectvvb h
>vvh i
[vvi j
]vvj k
readerFuncsvvl w
)vvw x
{ww 	
varxx 

returnResultsxx 
=xx 
newxx  #
Listxx$ (
<xx( )
objectxx) /
>xx/ 0
(xx0 1
)xx1 2
;xx2 3
usingyy 
(yy 
varyy 
conyy 
=yy 
newyy  

SqlConnectionyy! .
(yy. /
_connectionStringyy/ @
)yy@ A
)yyA B
{zz 

try{{ 
{|| 
con}} 
.}} 
Open}} 
(}} 
)}} 
;}} 
var~~ 

gridReader~~ "
=~~# $
con~~% (
.~~( )

QueryMultiple~~) 6
(~~6 7
sql~~7 :
,~~: ;

parameters~~< F
)~~F G
;~~G H
foreach
ï¿½ï¿½ 
(
ï¿½ï¿½ 
var
ï¿½ï¿½  

readerFunc
ï¿½ï¿½! +
in
ï¿½ï¿½, .
readerFuncs
ï¿½ï¿½/ :
)
ï¿½ï¿½: ;
{
ï¿½ï¿½ 
var
ï¿½ï¿½ 
obj
ï¿½ï¿½ 
=
ï¿½ï¿½  !

readerFunc
ï¿½ï¿½" ,
(
ï¿½ï¿½, -

gridReader
ï¿½ï¿½- 7
)
ï¿½ï¿½7 8
;
ï¿½ï¿½8 9

returnResults
ï¿½ï¿½ %
.
ï¿½ï¿½% &
Add
ï¿½ï¿½& )
(
ï¿½ï¿½) *
obj
ï¿½ï¿½* -
)
ï¿½ï¿½- .
;
ï¿½ï¿½. /
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 
finally
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Close
ï¿½ï¿½ #
(
ï¿½ï¿½# $
)
ï¿½ï¿½$ %
;
ï¿½ï¿½% &
con
ï¿½ï¿½' *
.
ï¿½ï¿½* +
Dispose
ï¿½ï¿½+ 2
(
ï¿½ï¿½2 3
)
ï¿½ï¿½3 4
;
ï¿½ï¿½4 5
}
ï¿½ï¿½6 7
}
ï¿½ï¿½ 

return
ï¿½ï¿½ 

returnResults
ï¿½ï¿½  
;
ï¿½ï¿½  !
}
ï¿½ï¿½ 	
public
ï¿½ï¿½ 
virtual
ï¿½ï¿½ 
async
ï¿½ï¿½ 
Task
ï¿½ï¿½ !
<
ï¿½ï¿½! "
IEnumerable
ï¿½ï¿½" -
<
ï¿½ï¿½- .
TEntity
ï¿½ï¿½. 5
>
ï¿½ï¿½5 6
>
ï¿½ï¿½6 7
Get
ï¿½ï¿½8 ;
(
ï¿½ï¿½; <
string
ï¿½ï¿½< B
query
ï¿½ï¿½C H
)
ï¿½ï¿½H I
{
ï¿½ï¿½ 	
using
ï¿½ï¿½ 
(
ï¿½ï¿½ 
var
ï¿½ï¿½ 
con
ï¿½ï¿½ 
=
ï¿½ï¿½ 
new
ï¿½ï¿½  

SqlConnection
ï¿½ï¿½! .
(
ï¿½ï¿½. /
_connectionString
ï¿½ï¿½/ @
)
ï¿½ï¿½@ A
)
ï¿½ï¿½A B
{
ï¿½ï¿½ 

try
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Open
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½ 
return
ï¿½ï¿½ 
await
ï¿½ï¿½  
con
ï¿½ï¿½! $
.
ï¿½ï¿½$ %

QueryAsync
ï¿½ï¿½% /
<
ï¿½ï¿½/ 0
TEntity
ï¿½ï¿½0 7
>
ï¿½ï¿½7 8
(
ï¿½ï¿½8 9
query
ï¿½ï¿½9 >
)
ï¿½ï¿½> ?
;
ï¿½ï¿½? @
}
ï¿½ï¿½ 
finally
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Close
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½  
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 

}
ï¿½ï¿½ 	
public
ï¿½ï¿½ 
virtual
ï¿½ï¿½ 
async
ï¿½ï¿½ 
Task
ï¿½ï¿½ !
<
ï¿½ï¿½! "
IEnumerable
ï¿½ï¿½" -
<
ï¿½ï¿½- .
TEntity
ï¿½ï¿½. 5
>
ï¿½ï¿½5 6
>
ï¿½ï¿½6 7
GetAll
ï¿½ï¿½8 >
(
ï¿½ï¿½> ?
)
ï¿½ï¿½? @
{
ï¿½ï¿½ 	
using
ï¿½ï¿½ 
(
ï¿½ï¿½ 
var
ï¿½ï¿½ 
con
ï¿½ï¿½ 
=
ï¿½ï¿½ 
new
ï¿½ï¿½  

SqlConnection
ï¿½ï¿½! .
(
ï¿½ï¿½. /
_connectionString
ï¿½ï¿½/ @
)
ï¿½ï¿½@ A
)
ï¿½ï¿½A B
{
ï¿½ï¿½ 

try
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Open
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½ 
return
ï¿½ï¿½ 
await
ï¿½ï¿½  
con
ï¿½ï¿½! $
.
ï¿½ï¿½$ %
GetAllAsync
ï¿½ï¿½% 0
<
ï¿½ï¿½0 1
TEntity
ï¿½ï¿½1 8
>
ï¿½ï¿½8 9
(
ï¿½ï¿½9 :
)
ï¿½ï¿½: ;
;
ï¿½ï¿½; <
}
ï¿½ï¿½ 
finally
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Close
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½  
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 

}
ï¿½ï¿½ 	
public
ï¿½ï¿½ 
virtual
ï¿½ï¿½ 
IEnumerable
ï¿½ï¿½ "
<
ï¿½ï¿½" #
TEntity
ï¿½ï¿½# *
>
ï¿½ï¿½* +
GetSync
ï¿½ï¿½, 3
(
ï¿½ï¿½3 4
string
ï¿½ï¿½4 :
query
ï¿½ï¿½; @
)
ï¿½ï¿½@ A
{
ï¿½ï¿½ 	
using
ï¿½ï¿½ 
(
ï¿½ï¿½ 
var
ï¿½ï¿½ 
con
ï¿½ï¿½ 
=
ï¿½ï¿½ 
new
ï¿½ï¿½  

SqlConnection
ï¿½ï¿½! .
(
ï¿½ï¿½. /
_connectionString
ï¿½ï¿½/ @
)
ï¿½ï¿½@ A
)
ï¿½ï¿½A B
{
ï¿½ï¿½ 

try
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Open
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½ 
return
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Query
ï¿½ï¿½ $
<
ï¿½ï¿½$ %
TEntity
ï¿½ï¿½% ,
>
ï¿½ï¿½, -
(
ï¿½ï¿½- .
query
ï¿½ï¿½. 3
)
ï¿½ï¿½3 4
;
ï¿½ï¿½4 5
}
ï¿½ï¿½ 
finally
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Close
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½  
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 

}
ï¿½ï¿½ 	
public
ï¿½ï¿½ 
virtual
ï¿½ï¿½ 
IEnumerable
ï¿½ï¿½ "
<
ï¿½ï¿½" #
TEntity
ï¿½ï¿½# *
>
ï¿½ï¿½* +

GetAllSync
ï¿½ï¿½, 6
(
ï¿½ï¿½6 7
)
ï¿½ï¿½7 8
{
ï¿½ï¿½ 	
using
ï¿½ï¿½ 
(
ï¿½ï¿½ 
var
ï¿½ï¿½ 
con
ï¿½ï¿½ 
=
ï¿½ï¿½ 
new
ï¿½ï¿½  

SqlConnection
ï¿½ï¿½! .
(
ï¿½ï¿½. /
_connectionString
ï¿½ï¿½/ @
)
ï¿½ï¿½@ A
)
ï¿½ï¿½A B
{
ï¿½ï¿½ 

try
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Open
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½ 
return
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
GetAll
ï¿½ï¿½ %
<
ï¿½ï¿½% &
TEntity
ï¿½ï¿½& -
>
ï¿½ï¿½- .
(
ï¿½ï¿½. /
)
ï¿½ï¿½/ 0
;
ï¿½ï¿½0 1
}
ï¿½ï¿½ 
finally
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Close
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½  
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 

}
ï¿½ï¿½ 	
public
ï¿½ï¿½ 
virtual
ï¿½ï¿½ 
async
ï¿½ï¿½ 
Task
ï¿½ï¿½ !
<
ï¿½ï¿½! "
TEntity
ï¿½ï¿½" )
>
ï¿½ï¿½) *
GetById
ï¿½ï¿½+ 2
(
ï¿½ï¿½2 3
long
ï¿½ï¿½3 7
id
ï¿½ï¿½8 :
)
ï¿½ï¿½: ;
{
ï¿½ï¿½ 	
using
ï¿½ï¿½ 
(
ï¿½ï¿½ 
var
ï¿½ï¿½ 
con
ï¿½ï¿½ 
=
ï¿½ï¿½ 
new
ï¿½ï¿½  

SqlConnection
ï¿½ï¿½! .
(
ï¿½ï¿½. /
_connectionString
ï¿½ï¿½/ @
)
ï¿½ï¿½@ A
)
ï¿½ï¿½A B
{
ï¿½ï¿½ 

try
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Open
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½ 
return
ï¿½ï¿½ 
await
ï¿½ï¿½  
con
ï¿½ï¿½! $
.
ï¿½ï¿½$ %
GetAsync
ï¿½ï¿½% -
<
ï¿½ï¿½- .
TEntity
ï¿½ï¿½. 5
>
ï¿½ï¿½5 6
(
ï¿½ï¿½6 7
id
ï¿½ï¿½7 9
)
ï¿½ï¿½9 :
;
ï¿½ï¿½: ;
}
ï¿½ï¿½ 
finally
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Close
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½  
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 

}
ï¿½ï¿½ 	
public
ï¿½ï¿½ 
TEntity
ï¿½ï¿½ 
GetByIdSync
ï¿½ï¿½ "
(
ï¿½ï¿½" #
long
ï¿½ï¿½# '
id
ï¿½ï¿½( *
)
ï¿½ï¿½* +
{
ï¿½ï¿½ 	
using
ï¿½ï¿½ 
(
ï¿½ï¿½ 
var
ï¿½ï¿½ 
con
ï¿½ï¿½ 
=
ï¿½ï¿½ 
new
ï¿½ï¿½  

SqlConnection
ï¿½ï¿½! .
(
ï¿½ï¿½. /
_connectionString
ï¿½ï¿½/ @
)
ï¿½ï¿½@ A
)
ï¿½ï¿½A B
{
ï¿½ï¿½ 

try
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Open
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½ 
return
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Get
ï¿½ï¿½ "
<
ï¿½ï¿½" #
TEntity
ï¿½ï¿½# *
>
ï¿½ï¿½* +
(
ï¿½ï¿½+ ,
id
ï¿½ï¿½, .
)
ï¿½ï¿½. /
;
ï¿½ï¿½/ 0
}
ï¿½ï¿½ 
finally
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Close
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½  
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 

}
ï¿½ï¿½ 	
private
ï¿½ï¿½ 
void
ï¿½ï¿½ 
SetId
ï¿½ï¿½ 
<
ï¿½ï¿½ 
T
ï¿½ï¿½ 
>
ï¿½ï¿½ 
(
ï¿½ï¿½ 
T
ï¿½ï¿½ 
obj
ï¿½ï¿½  #
,
ï¿½ï¿½# $
int
ï¿½ï¿½% (
id
ï¿½ï¿½) +
,
ï¿½ï¿½+ ,
IDictionary
ï¿½ï¿½- 8
<
ï¿½ï¿½8 9
string
ï¿½ï¿½9 ?
,
ï¿½ï¿½? @
object
ï¿½ï¿½A G
>
ï¿½ï¿½G H

propertyPairs
ï¿½ï¿½I V
)
ï¿½ï¿½V W
{
ï¿½ï¿½ 	
if
ï¿½ï¿½ 
(
ï¿½ï¿½ 

propertyPairs
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Count
ï¿½ï¿½ #
==
ï¿½ï¿½$ &
$num
ï¿½ï¿½' (
)
ï¿½ï¿½( )
{
ï¿½ï¿½ 

var
ï¿½ï¿½ 
propertyName
ï¿½ï¿½  
=
ï¿½ï¿½! "

propertyPairs
ï¿½ï¿½# 0
.
ï¿½ï¿½0 1
Keys
ï¿½ï¿½1 5
.
ï¿½ï¿½5 6
First
ï¿½ï¿½6 ;
(
ï¿½ï¿½; <
)
ï¿½ï¿½< =
;
ï¿½ï¿½= >
var
ï¿½ï¿½ 
propertyInfo
ï¿½ï¿½  
=
ï¿½ï¿½! "
obj
ï¿½ï¿½# &
.
ï¿½ï¿½& '
GetType
ï¿½ï¿½' .
(
ï¿½ï¿½. /
)
ï¿½ï¿½/ 0
.
ï¿½ï¿½0 1
GetProperty
ï¿½ï¿½1 <
(
ï¿½ï¿½< =
propertyName
ï¿½ï¿½= I
)
ï¿½ï¿½I J
;
ï¿½ï¿½J K
if
ï¿½ï¿½ 
(
ï¿½ï¿½ 
propertyInfo
ï¿½ï¿½  
.
ï¿½ï¿½  !
PropertyType
ï¿½ï¿½! -
==
ï¿½ï¿½. 0
typeof
ï¿½ï¿½1 7
(
ï¿½ï¿½7 8
int
ï¿½ï¿½8 ;
)
ï¿½ï¿½; <
||
ï¿½ï¿½= ?
propertyInfo
ï¿½ï¿½@ L
.
ï¿½ï¿½L M
PropertyType
ï¿½ï¿½M Y
==
ï¿½ï¿½Z \
typeof
ï¿½ï¿½] c
(
ï¿½ï¿½c d
Int64
ï¿½ï¿½d i
)
ï¿½ï¿½i j
)
ï¿½ï¿½j k
{
ï¿½ï¿½ 
propertyInfo
ï¿½ï¿½  
.
ï¿½ï¿½  !
SetValue
ï¿½ï¿½! )
(
ï¿½ï¿½) *
obj
ï¿½ï¿½* -
,
ï¿½ï¿½- .
id
ï¿½ï¿½/ 1
,
ï¿½ï¿½1 2
null
ï¿½ï¿½3 7
)
ï¿½ï¿½7 8
;
ï¿½ï¿½8 9
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 

}
ï¿½ï¿½ 	
public
ï¿½ï¿½ 
void
ï¿½ï¿½ 
Insert
ï¿½ï¿½ 
(
ï¿½ï¿½ 
TEntity
ï¿½ï¿½ "
entity
ï¿½ï¿½# )
)
ï¿½ï¿½) *
{
ï¿½ï¿½ 	
var
ï¿½ï¿½ 
propertyContainer
ï¿½ï¿½ !
=
ï¿½ï¿½" #
new
ï¿½ï¿½$ '
DapperUtils
ï¿½ï¿½( 3
(
ï¿½ï¿½3 4
)
ï¿½ï¿½4 5
.
ï¿½ï¿½5 6#
ParsePropertiesInsert
ï¿½ï¿½6 K
(
ï¿½ï¿½K L
entity
ï¿½ï¿½L R
)
ï¿½ï¿½R S
;
ï¿½ï¿½S T
var
ï¿½ï¿½ 
sql
ï¿½ï¿½ 
=
ï¿½ï¿½ 
string
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Format
ï¿½ï¿½ #
(
ï¿½ï¿½# $
$str
ï¿½ï¿½$ p
,
ï¿½ï¿½p q
typeof
ï¿½ï¿½ 
(
ï¿½ï¿½ 
TEntity
ï¿½ï¿½ 
)
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Name
ï¿½ï¿½  
,
ï¿½ï¿½  !
string
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Join
ï¿½ï¿½ 
(
ï¿½ï¿½ 
$str
ï¿½ï¿½ 
,
ï¿½ï¿½ 
propertyContainer
ï¿½ï¿½ /
.
ï¿½ï¿½/ 0

ValueNames
ï¿½ï¿½0 :
)
ï¿½ï¿½: ;
,
ï¿½ï¿½; <
string
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Join
ï¿½ï¿½ 
(
ï¿½ï¿½ 
$str
ï¿½ï¿½ 
,
ï¿½ï¿½ 
propertyContainer
ï¿½ï¿½ 0
.
ï¿½ï¿½0 1

ValueNames
ï¿½ï¿½1 ;
)
ï¿½ï¿½; <
)
ï¿½ï¿½< =
;
ï¿½ï¿½= >
using
ï¿½ï¿½ 
(
ï¿½ï¿½ 
var
ï¿½ï¿½ 
con
ï¿½ï¿½ 
=
ï¿½ï¿½ 
new
ï¿½ï¿½  

SqlConnection
ï¿½ï¿½! .
(
ï¿½ï¿½. /
_connectionString
ï¿½ï¿½/ @
)
ï¿½ï¿½@ A
)
ï¿½ï¿½A B
{
ï¿½ï¿½ 

try
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Open
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½ 
var
ï¿½ï¿½ 
id
ï¿½ï¿½ 
=
ï¿½ï¿½ 
con
ï¿½ï¿½  
.
ï¿½ï¿½  !
Query
ï¿½ï¿½! &
<
ï¿½ï¿½& '
int
ï¿½ï¿½' *
>
ï¿½ï¿½* +
(
ï¿½ï¿½+ ,
sql
ï¿½ï¿½, /
,
ï¿½ï¿½/ 0
propertyContainer
ï¿½ï¿½1 B
.
ï¿½ï¿½B C

ValuePairs
ï¿½ï¿½C M
,
ï¿½ï¿½M N
commandType
ï¿½ï¿½O Z
:
ï¿½ï¿½Z [
System
ï¿½ï¿½\ b
.
ï¿½ï¿½b c
Data
ï¿½ï¿½c g
.
ï¿½ï¿½g h
CommandType
ï¿½ï¿½h s
.
ï¿½ï¿½s t
Text
ï¿½ï¿½t x
)
ï¿½ï¿½x y
.
ï¿½ï¿½y z
First
ï¿½ï¿½z 
(ï¿½ï¿½ ï¿½
)ï¿½ï¿½ï¿½ ï¿½
;ï¿½ï¿½ï¿½ ï¿½
SetId
ï¿½ï¿½ 
(
ï¿½ï¿½ 
entity
ï¿½ï¿½  
,
ï¿½ï¿½  !
id
ï¿½ï¿½" $
,
ï¿½ï¿½$ %
propertyContainer
ï¿½ï¿½& 7
.
ï¿½ï¿½7 8
IdPairs
ï¿½ï¿½8 ?
)
ï¿½ï¿½? @
;
ï¿½ï¿½@ A
}
ï¿½ï¿½ 
catch
ï¿½ï¿½ 
(
ï¿½ï¿½ 
	Exception
ï¿½ï¿½  
ex
ï¿½ï¿½! #
)
ï¿½ï¿½# $
{
ï¿½ï¿½ 
string
ï¿½ï¿½ 
sEx
ï¿½ï¿½ 
=
ï¿½ï¿½  
ex
ï¿½ï¿½! #
.
ï¿½ï¿½# $
Message
ï¿½ï¿½$ +
;
ï¿½ï¿½+ ,
}
ï¿½ï¿½ 
finally
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Close
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½  
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 

}
ï¿½ï¿½ 	
public
ï¿½ï¿½ 
virtual
ï¿½ï¿½ 
async
ï¿½ï¿½ 
Task
ï¿½ï¿½ !
<
ï¿½ï¿½! "
bool
ï¿½ï¿½" &
>
ï¿½ï¿½& '
Update
ï¿½ï¿½( .
(
ï¿½ï¿½. /
TEntity
ï¿½ï¿½/ 6
entity
ï¿½ï¿½7 =
)
ï¿½ï¿½= >
{
ï¿½ï¿½ 	
using
ï¿½ï¿½ 
(
ï¿½ï¿½ 
var
ï¿½ï¿½ 
con
ï¿½ï¿½ 
=
ï¿½ï¿½ 
new
ï¿½ï¿½  

SqlConnection
ï¿½ï¿½! .
(
ï¿½ï¿½. /
_connectionString
ï¿½ï¿½/ @
)
ï¿½ï¿½@ A
)
ï¿½ï¿½A B
{
ï¿½ï¿½ 

try
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Open
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½ 
return
ï¿½ï¿½ 
await
ï¿½ï¿½  
con
ï¿½ï¿½! $
.
ï¿½ï¿½$ %
UpdateAsync
ï¿½ï¿½% 0
<
ï¿½ï¿½0 1
TEntity
ï¿½ï¿½1 8
>
ï¿½ï¿½8 9
(
ï¿½ï¿½9 :
entity
ï¿½ï¿½: @
)
ï¿½ï¿½@ A
;
ï¿½ï¿½A B
}
ï¿½ï¿½ 
finally
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Close
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½  
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 

}
ï¿½ï¿½ 	
public
ï¿½ï¿½ 
bool
ï¿½ï¿½ 

UpdateSync
ï¿½ï¿½ 
(
ï¿½ï¿½ 
TEntity
ï¿½ï¿½ &
entity
ï¿½ï¿½' -
)
ï¿½ï¿½- .
{
ï¿½ï¿½ 	
using
ï¿½ï¿½ 
(
ï¿½ï¿½ 
var
ï¿½ï¿½ 
con
ï¿½ï¿½ 
=
ï¿½ï¿½ 
new
ï¿½ï¿½  

SqlConnection
ï¿½ï¿½! .
(
ï¿½ï¿½. /
_connectionString
ï¿½ï¿½/ @
)
ï¿½ï¿½@ A
)
ï¿½ï¿½A B
{
ï¿½ï¿½ 

try
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Open
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½ 
return
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Update
ï¿½ï¿½ %
<
ï¿½ï¿½% &
TEntity
ï¿½ï¿½& -
>
ï¿½ï¿½- .
(
ï¿½ï¿½. /
entity
ï¿½ï¿½/ 5
)
ï¿½ï¿½5 6
;
ï¿½ï¿½6 7
}
ï¿½ï¿½ 
finally
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Close
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½  
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 

}
ï¿½ï¿½ 	
public
ï¿½ï¿½ 
virtual
ï¿½ï¿½ 
async
ï¿½ï¿½ 
Task
ï¿½ï¿½ !
<
ï¿½ï¿½! "
bool
ï¿½ï¿½" &
>
ï¿½ï¿½& '
Delete
ï¿½ï¿½( .
(
ï¿½ï¿½. /
TEntity
ï¿½ï¿½/ 6
entity
ï¿½ï¿½7 =
)
ï¿½ï¿½= >
{
ï¿½ï¿½ 	
using
ï¿½ï¿½ 
(
ï¿½ï¿½ 
var
ï¿½ï¿½ 
con
ï¿½ï¿½ 
=
ï¿½ï¿½ 
new
ï¿½ï¿½  

SqlConnection
ï¿½ï¿½! .
(
ï¿½ï¿½. /
_connectionString
ï¿½ï¿½/ @
)
ï¿½ï¿½@ A
)
ï¿½ï¿½A B
{
ï¿½ï¿½ 

try
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Open
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½ 
return
ï¿½ï¿½ 
await
ï¿½ï¿½  
con
ï¿½ï¿½! $
.
ï¿½ï¿½$ %
DeleteAsync
ï¿½ï¿½% 0
<
ï¿½ï¿½0 1
TEntity
ï¿½ï¿½1 8
>
ï¿½ï¿½8 9
(
ï¿½ï¿½9 :
entity
ï¿½ï¿½: @
)
ï¿½ï¿½@ A
;
ï¿½ï¿½A B
}
ï¿½ï¿½ 
finally
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Close
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½  
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 

}
ï¿½ï¿½ 	
public
ï¿½ï¿½ 
virtual
ï¿½ï¿½ 
async
ï¿½ï¿½ 
Task
ï¿½ï¿½ !
<
ï¿½ï¿½! "
int
ï¿½ï¿½" %
>
ï¿½ï¿½% &
ExecuteCommand
ï¿½ï¿½' 5
(
ï¿½ï¿½5 6
string
ï¿½ï¿½6 <
query
ï¿½ï¿½= B
)
ï¿½ï¿½B C
{
ï¿½ï¿½ 	
using
ï¿½ï¿½ 
(
ï¿½ï¿½ 
var
ï¿½ï¿½ 
con
ï¿½ï¿½ 
=
ï¿½ï¿½ 
new
ï¿½ï¿½  

SqlConnection
ï¿½ï¿½! .
(
ï¿½ï¿½. /
_connectionString
ï¿½ï¿½/ @
)
ï¿½ï¿½@ A
)
ï¿½ï¿½A B
{
ï¿½ï¿½ 

try
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Open
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½ 
var
ï¿½ï¿½ 
	resultado
ï¿½ï¿½ !
=
ï¿½ï¿½" #
(
ï¿½ï¿½$ %
await
ï¿½ï¿½% *
con
ï¿½ï¿½+ .
.
ï¿½ï¿½. /
ExecuteAsync
ï¿½ï¿½/ ;
(
ï¿½ï¿½; <
query
ï¿½ï¿½< A
)
ï¿½ï¿½A B
)
ï¿½ï¿½B C
;
ï¿½ï¿½C D
return
ï¿½ï¿½ 
	resultado
ï¿½ï¿½ $
;
ï¿½ï¿½$ %
}
ï¿½ï¿½ 
finally
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Close
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½  
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 

}
ï¿½ï¿½ 	
public
ï¿½ï¿½ 
virtual
ï¿½ï¿½ 
async
ï¿½ï¿½ 
Task
ï¿½ï¿½ !
<
ï¿½ï¿½! "
bool
ï¿½ï¿½" &
>
ï¿½ï¿½& '

InsertCommand
ï¿½ï¿½( 5
(
ï¿½ï¿½5 6
string
ï¿½ï¿½6 <
query
ï¿½ï¿½= B
)
ï¿½ï¿½B C
{
ï¿½ï¿½ 	
using
ï¿½ï¿½ 
(
ï¿½ï¿½ 
var
ï¿½ï¿½ 
con
ï¿½ï¿½ 
=
ï¿½ï¿½ 
new
ï¿½ï¿½  

SqlConnection
ï¿½ï¿½! .
(
ï¿½ï¿½. /
_connectionString
ï¿½ï¿½/ @
)
ï¿½ï¿½@ A
)
ï¿½ï¿½A B
{
ï¿½ï¿½ 

try
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ Template
Open
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½ 
var
ï¿½ï¿½ 
rowsAffected
ï¿½ï¿½ $
=
ï¿½ï¿½% &
await
ï¿½ï¿½' ,
con
ï¿½ï¿½- 0
.
ï¿½ï¿½0 1
ExecuteAsync
ï¿½ï¿½1 =
(
ï¿½ï¿½= >
query
ï¿½ï¿½> C
)
ï¿½ï¿½C D
;
TemplateD E
return
ï¿½ï¿½ 
(
ï¿½ï¿½ 
rowsAffected
ï¿½ï¿½ (
>
ï¿½ï¿½) *
Template
ï¿½ï¿½+ ,
)
ï¿½ï¿½, -
;
ï¿½ï¿½- .
}
ï¿½ï¿½ 
catch
ï¿½ï¿½ 
(
ï¿½ï¿½ 
	Exception
ï¿½ï¿½  
eTemplate
ï¿½ï¿½! #
)
Template# $
{
ï¿½ï¿½ 
string
ï¿½ï¿½ 
sEx
ï¿½ï¿½ 
=
ï¿½ï¿½  
ex
ï¿½ï¿½! #
.
ï¿½ï¿½# $
Message
ï¿½ï¿½$ +
;
ï¿½ï¿½+ ,
return
ï¿½ï¿½ 
false
ï¿½ï¿½  
;
ï¿½ï¿½  !
}
ï¿½ï¿½ 
finally
ï¿½ï¿½ 
{
ï¿½ï¿½ 
con
ï¿½ï¿½ 
.
ï¿½ï¿½ 
Close
ï¿½ï¿½ 
(
ï¿½ï¿½ 
)
ï¿½ï¿½ 
;
ï¿½ï¿½  
}
ï¿½ï¿½ 
}
ï¿½ï¿½ 

}
ï¿½ï¿½ 	
}
ï¿½ï¿½ 
}ï¿½ï¿½ ï¿½	
ï¿½D:\GitHub\clodoaldozeferini\TestesGit\ASPNet\.NetCore\src\Exemplo\ServerSide\Exemplo.Infrastructure\Repositories\DBExemplo\PessoaRepository.cs
	namespace

 	
Exemplo


 
.

 
Infrastructure

  
.

  !
Repositories

! -
.

- .
	DBExemplo

. 7
{ 
public 

class 
PessoaRepository !
:" #
Repositories$ 0
.0 1
Base1 5
.5 6

Repository6 @
<@ A
PessoaA G
>G H
,H I
ExemploJ Q
.Q R
DomainR X
.X Y

InterfacesY c
.c d
Repositoriesd p
.p q
	DBExemploq z
.z {
IPessoaRepository	{ ï¿½
{

 
public 
PessoaRepository 
(  
IConfiguration  .

configuration/ <
)< =
:> ?
base@ D
(D E
EDataBaseConnectionE X
.X Y

ID_DB_EXEMPLOY f
,f g

configurationh u
)u v
{ 	
} 	
} 
} 